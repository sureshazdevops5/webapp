# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- none

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'docker-spn'
  imageRepository: 'webapplication'
  containerRegistry: 'testsureshacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: publish artifact
  jobs:
    -  job: publishartifact
       displayName: publishartifact
       pool:
         vmImage: $(vmImageName)
       steps:
         -  task: UseDotNet@2
            displayName: dotnet download
            inputs:
               packageType: sdk
               version: '6.x'

         - task: NuGetToolInstaller@1
           displayName: nuget install

         - task: NuGetCommand@2
           displayName: nuget restore
           inputs:
             restoreSolution: $(solution)

         - task: DotNetCoreCLI@2
           displayName: dotnet-build
           inputs:
            command: build
            arguments: '--configuration $(buildConfiguration)'
            projects: '**/*.csproj'
          
         - task: DotNetCoreCLI@2
           displayName: dotnet-publish
           inputs:
              command: publish
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              publishWebProjects: true
              zipAfterPublish: false

         - pwsh: 
            Get-ChildItem -path $(Build.ArtifactStagingDirectory)\*.* -Recurse -Force | Out-String -Width 80
           errorActionPreference: Continue
           displayName: 'List-Content'
           continueOnError: true
          
         - publish: '$(Build.ArtifactStagingDirectory)'
           displayName: 'publish artifact'
           artifact: 'webappartifact'


- stage: Push
  displayName: push stage
  jobs:
    -  job: pushimage
       pool:
         vmImage: $(vmImageName)
       steps:
       - download: current
         artifact: 'webappartifact'
         displayName: 'download artifcat'


       - script: ls -R $(pipeline.workspace)/webappartifact
       - task: Docker@2
         displayName: Build and push an image to container registry
         inputs:
          command: buildAndPush
          buildContext: '$(pipeline.workspace)/webappartifact/WebApp'
          repository: $(imageRepository)
          Dockerfile: $(dockerfilePath)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
           $(tag)



       - task: PublishPipelineArtifact@1
         displayName: publish artifact
         inputs:
           publishLocation: pipeline
           artifact: 'sourcefiles'
           targetPath: $(pipeline.Workspace)
